/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { quick-tap-ms = <190>; };

&sk { quick-release; };

/ {
    behaviors {
        hm_l: hm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 19 20 21 22 30 31 32 33 34 42 43 44 45 46 54 55 56 57 58 59 48 49 50 51 52 53>;
        };

        hm_r: hm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <13 14 15 16 17 25 26 27 28 29 37 38 39 40 41 48 49 50 51 52 53 54 55 56 57 58 59>;
        };

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_SHIFT_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <48 49 50 51 52 53 54 55 56 57 58 59 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46>;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_SHIFT_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <13 14 15 16 17 25 26 27 28 29 37 38 39 40 41 48 49 50 51 52 53 54 55 56 57 58 59>;
        };

        holdholdtaptap: holdholdtaptap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDHOLDTAPTAP";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            retro-tap;
        };

        sticky_hold: sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "Sticky on tap, hold on hold";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        shiftmorph: shiftmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "Tap to hold shift, shift-tap to CAPSWORD";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        sk_hold: sk_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "Sticky key/Momentary layer";
            bindings = <&sk>, <&mo>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        shiftsym: shiftsym {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTSYM";
            bindings = <&to_hold 2 2>, <&sl 3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        to_hold: to_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "@to on tap, @mo on hold";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        quicksymbol: quicksymbol {
            compatible = "zmk,behavior-mod-morph";
            label = "click control, ctrl-click symbol layer";
            bindings = <&sk LCTRL>, <&sl 3>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        goflat: goflat {
            compatible = "zmk,behavior-mod-morph";
            label = "click sk ctrl, ctrl-click to default";
            bindings = <&sk LCTRL>, <&to 0>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    macros {
        pwd: pwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N7 &kp N6 &kp F &kp D &kp STAR &kp AMPS &kp LS(G) &kp LS(H) &kp N9 &kp N8 &kp C &kp T>;
            label = "PWD";
        };

        plus_minus: plus_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_NUMBER_7>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "PLUS_MINUS";
        };

        degree: degree {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "DEGREE";
        };

        numword: numword {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "NUMWORD";
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
            layers = <0 1 3 4>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
            layers = <0 1 3 4>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <14 26>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <15 27>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 28>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <17 29>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
        };

        repeat {
            bindings = <&key_repeat>;
            key-positions = <27 28>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <26 38>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <27 39>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <28 40>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <29 41>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <38 39>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <39 40>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <40 41>;
        };

        pwdshortcut {
            bindings = <&kp LC(SEMI)>;
            key-positions = <37 38>;
        };

        nwenter {
            bindings = <&numword ENTER>;
            key-positions = <15 16>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC   |  1  |  2  |  3   |  4   |  5   |                    |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB   |  Q  |  W  |  E   |  R   |  T   |                    |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL  |  A  |  S  |  D   |  F   |  G   |                    |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT  |  Z  |  X  |  C   |  V   |  B   |                    |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            // |    2   |  2  | f   | 6    | 4    | 1    |                    | 2    | 1     | w     | s    | n     |  a    |

            bindings = <
&kp ESCAPE    &kp N1      &kp N2     &kp N3     &kp N4     &kp N5    &kp N6    &kp N7     &kp N8    &kp N9            &kp N0         &kp EQUAL
&kp TAB       &kp SQT     &kp COMMA  &kp DOT    &kp P      &kp Y     &kp F     &kp G      &kp C     &kp R             &kp L          &kp FSLH
&shiftmorph   &kp A       &kp O      &kp E      &kp U      &kp I     &kp D     &kp H      &kp T     &kp N             &kp S          &kp MINUS
&quicksymbol  &kp SEMI    &kp Q      &kp J      &kp K      &kp X     &kp B     &kp M      &kp W     &kp V             &kp Z          &kp BSLH
&goflat       &kp DELETE  &shiftsym  &kp LSHFT  &kp SPACE  &kp LALT  &kp RALT  &kp ENTER  &kp RGUI  &sticky_hold 1 1  &kp BACKSPACE  &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |                   |      |  _    |  +    |  {   |   }   |  "|"  |
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |

            bindings = <
&trans  &none    &kp F10  &kp F11  &kp F12  &none    &none       &none        &degree     &none      &none       &none
&trans  &kp F12  &kp F7   &kp F8   &kp F9   &kp F15  &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO  &none
&trans  &kp F11  &kp F4   &kp F5   &kp F6   &kp F14  &kp CAPS    &kp LEFT     &kp DOWN    &kp UP     &kp RIGHT   &none
&trans  &kp F10  &kp F1   &kp F2   &kp F3   &kp F13  &kp INS     &kp HOME     &kp PG_UP   &kp PG_DN  &kp END     &none
&trans  &trans   &trans   &trans   &trans   &trans   &trans      &trans       &trans      &trans     &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        num_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |		             |  +   |   -   |   =   |  [   |   ]   |   \   |
            // |     |     |      |      |      |        |                   |       |      |       |       |      |       |

            bindings = <
&numword ESCAPE  &kp LEFT_PARENTHESIS  &kp KP_MINUS     &kp KP_NUMBER_0  &kp KP_DOT      &kp RIGHT_PARENTHESIS  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&numword TAB     &kp LBKT              &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_N9       &kp RBKT               &none         &none         &none           &none         &none         &none
&trans           &kp GRAVE             &kp KP_N4        &kp KP_NUMBER_5  &kp KP_N6       &kp EQUAL              &none         &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT     &none
&trans           &kp SLASH             &kp KP_N1        &kp KP_N2        &kp KP_N3       &kp BSLH               &kp INS       &kp HOME      &kp PG_DN       &kp PG_UP     &kp END       &none
&trans           &kp BACKSPACE         &to 2            &trans           &numword SPACE  &trans                 &trans        &trans        &trans          &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        sym_layer {
            bindings = <
&trans  &none          &kp UNDER     &kp RIGHT_PARENTHESIS  &none          &none         &none  &none      &degree    &none     &none        &plus_minus
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)           &kp LS(LPAR)   &kp LS(RBRC)  &none  &to 0      &none      &none     &bootloader  &none
&trans  &kp LS(GRAVE)  &kp LS(DLLR)  &kp LS(PRCNT)          &kp LS(CARET)  &kp LS(PLUS)  &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI     &none
&trans  &kp LS(SLASH)  &kp LS(EXCL)  &kp LS(AT)             &kp LS(POUND)  &kp LS(PIPE)  &none  &to 3      &to 0      &none     &none        &none
&trans  &kp LS(UNDER)  &trans        &kp LS(LPAR)           &kp LS(RPAR)   &trans        &none  &trans     &trans     &none     &trans       &none
            >;
        };

        mirror_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp L   &kp R   &kp C   &kp G   &kp F   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp S   &kp N   &kp T   &kp H   &kp D   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z   &kp V   &kp W   &kp M   &kp B   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
